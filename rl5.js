!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define([],i):"object"==typeof exports?exports.rl5=i():t.rl5=i()}(window,function(){return function(t){var i={};function e(s){if(i[s])return i[s].exports;var o=i[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=i,e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:s})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(e.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)e.d(s,o,function(i){return t[i]}.bind(null,o));return s},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";e.r(i);class s{constructor(t,i){this.numFeatures=t.numFeatures,this.numActions=t.numActions,this.name="REINFORCE",this.env=t,i=i||{},this.config={name:"REINFORCE",learningRate:i.learningRate||.05,discountRate:i.discountRate||.95,trainIterations:i.trainIterations||1e3,maxStepsPerIter:i.maxStepsPerIter||500,hiddenLayerSizesOrModel:i.hiddenLayerSizes||10,saveModel:i.saveModel||!1,saveModelPath:i.saveModelPath||void 0,endingCondition:i.endingCondition||void 0},this.model,this.config.hiddenLayerSizesOrModel instanceof tf.LayersModel?this.model=this.config.hiddenLayerSizesOrModel:this.createModel(this.config.hiddenLayerSizesOrModel,this.numFeatures,this.numActions),this.optimizer=tf.train.adam(this.config.learningRate),this.stopTraining=!1}createModel(t,i,e){Array.isArray(t)||(t=[t]),this.model=tf.sequential(),t.forEach((t,e)=>{this.model.add(tf.layers.dense({units:t,activation:"relu",kernelInitializer:"randomNormal",inputShape:0===e?[i]:void 0}))}),this.model.add(tf.layers.dense({units:e})),this.model.summary()}getModel(){return this.model}async train(){const t=[],i=[];let e,s=0,r=0;this.env.reset();const n=[],h=[];for(let t=0;t<this.config.maxStepsPerIter;++t){const i=tf.tidy(()=>{const t=this.env.getStateTensor();return this.getGradientsAndSaveActions(t).grads});this.pushGradients(h,i);const s=this.currentActions_[0],o=this.env.step(s),a=o[0],c=o[1];if(e=o[2],await tf.nextFrame(),n.push(a),c){r=t+1;break}}this.pushGradients(t,h),i.push(n),tf.tidy(()=>{const e=function(t,i){return tf.tidy(()=>{const e=[];for(const s of t)e.push(o(s,i));const s=tf.concat(e),r=tf.mean(s),n=tf.sqrt(tf.mean(tf.square(s.sub(r))));return e.map(t=>t.sub(r).div(n))})}(i,this.config.discountRate);this.optimizer.applyGradients(function(t,i){return tf.tidy(()=>{const e={};for(const s in t)e[s]=tf.tidy(()=>{const e=t[s].map(t=>tf.stack(t)),o=[];for(let t=0;t<e[0].rank-1;++t)o.push(1);const r=i.map(t=>t.reshape(t.shape.concat(o)));for(let t=0;t<e.length;++t)e[t]=e[t].mul(r[t]);return tf.mean(tf.concat(e,0),0)});return e})}(t,e))}),tf.dispose(t);for(let t=0;t<n.length;t++)s+=n[t];return 0==r&&(r=this.config.maxStepsPerGame),[s,r,e]}getGradientsAndSaveActions(t){return tf.variableGrads(()=>tf.tidy(()=>{const[i,e]=this.getLogitsAndActions(t);this.currentActions_=e.dataSync();const s=tf.oneHot(tf.tensor1d(this.currentActions_),this.numActions);return tf.losses.softmaxCrossEntropy(s,i)}))}getCurrentActions(){return this.currentActions_}getLogitsAndActions(t){return tf.tidy(()=>{const i=this.model.predict(t),e=i.softmax();return[i,tf.multinomial(e,1,null,!0)]})}getActions(t){return this.getLogitsAndActions(t)[1].dataSync()}pushGradients(t,i){for(const e in i)e in t?t[e].push(i[e]):t[e]=[i[e]]}}function o(t,i){const e=tf.buffer([t.length]);let s=0;for(let o=t.length-1;o>=0;--o){const r=i*s+t[o];e.set(r,o),s=r}return e.toTensor()}class r{constructor(t,i){this.numFeatures=t.numFeatures,this.numActions=t.numActions,this.name="TabularQ",this.env=t,i=i||{},this.config={name:"TabularQ",learningRate:i.learningRate||.1,discountRate:i.discountRate||.9,trainIterations:i.trainIterations||40,endingCondition:i.endingCondition||void 0,saveModel:i.saveModel||!1,modelName:i.modelName||"RL5-TabularQ"},this.qTable=this.buildQTable(this.numFeatures,this.numActions),this.stopTraining=!1}buildQTable(t,i){let e=new p5.Table;for(let t=0;t<i;t++)e.addColumn(str(t));for(let i=0;i<t;i++){let t=e.addRow();for(let i=0;i<e.getColumnCount();i++)t.setNum(i,0)}return console.log(e),e}async train(){const t=this.config.learningRate,i=this.config.discountRate;this.env.reset();let e=!1,s=this.env.getState(),o=0,r=0;for(;!e;){const n=this.chooseAction(s,this.qTable,!0),h=this.env.step(n),a=h[0],c=this.env.getState();e=h[1];const l=this.qTable.getNum(s,n);let d;if(e)d=a;else{const t=this.qTable.getRow(c);let e=[];for(let i=0;i<this.qTable.getColumnCount();i++)e.push(t.getNum(i));d=a+i*max(e)}const u=this.qTable.getNum(s,n)+t*(d-l);this.qTable.set(s,n,u),s=c,o+=a,r+=1,await tf.nextFrame()}return[o,r]}chooseAction(t,i,e){const s=i.getRow(t),o=[];for(var r=0;r<i.getColumnCount();r++)o.push(s.getNum(r));return(random(1)>.9||0==o[0]&&0==o[1])&&e?random(1)<.5?0:1:o[0]>=o[1]?0:1}}function n(t,i){return tf.tidy(()=>{let e=new i(t.config);e.buildModel(t.obs,t.action);const s=t.model.weights;for(let t=0;t<s.length;t++)e.model.weights[t].val.assign(s[t].val);return e})}function h(t,i,e,s){return tf.tidy(()=>{const o=t.model.trainableWeights;for(let t=0;t<o.length;t++){let r=i.model.trainableWeights[t].val.shape,n=tf.randomNormal(r,0,e,"float32",s),h=o[t].val.add(n);i.model.trainableWeights[t].val.assign(h)}})}function a(t,i,e){return tf.tidy(()=>{const s=i.model.trainableWeights,o=t.model.trainableWeights,r=tf.scalar(1),n=tf.scalar(e.tau);for(let i=0;i<s.length;i++){const e=t.model.trainableWeights[i].val.clone();let h=n.mul(s[i].val).add(o[i].val.mul(r.sub(n)));t.model.trainableWeights[i].val.assign(h),0==e.sub(t.model.trainableWeights[i].val).mean().dataSync()[0]&&console.warn("targetUpdate: Nothing have been changed!")}})}class c{constructor(t){this.stateSize=t.stateSize,this.nbActions=t.nbActions,this.layerNorm=t.layerNorm,this.firstLayerSize=t.actorFirstLayerSize,this.secondLayerSize=t.actorSecondLayerSize,this.seed=t.seed,this.config=t,this.obs=null}buildModel(t){this.obs=t,this.firstLayer=tf.layers.dense({units:this.firstLayerSize,kernelInitializer:tf.initializers.glorotUniform({seed:this.seed}),activation:"relu",useBias:!0,biasInitializer:"zeros"}),this.secondLayer=tf.layers.dense({units:this.secondLayerSize,kernelInitializer:tf.initializers.glorotUniform({seed:this.seed}),activation:"relu",useBias:!0,biasInitializer:"zeros"}),this.outputLayer=tf.layers.dense({units:this.nbActions,kernelInitializer:tf.initializers.randomUniform({minval:.003,maxval:.003,seed:this.seed}),activation:"tanh",useBias:!0,biasInitializer:"zeros"}),this.predict=i=>tf.tidy(()=>{i&&(t=i);let e=this.firstLayer.apply(t),s=this.secondLayer.apply(e);return this.outputLayer.apply(s)});const i=this.predict();this.model=tf.model({inputs:t,outputs:i})}}class l{constructor(t){this.stateSize=t.stateSize,this.nbActions=t.nbActions,this.layerNorm=t.layerNorm,this.firstLayerSSize=t.criticFirstLayerSSize,this.firstLayerASize=t.criticFirstLayerASize,this.secondLayerSize=t.criticSecondLayerSize,this.seed=t.seed,this.config=t,this.obs=null,this.action=null}buildModel(t,i){this.obs=t,this.action=i,this.add=tf.layers.add(),this.firstLayerS=tf.layers.dense({units:this.firstLayerSSize,kernelInitializer:tf.initializers.glorotUniform({seed:this.seed}),activation:"linear",useBias:!0,biasInitializer:"zeros"}),this.firstLayerA=tf.layers.dense({units:this.firstLayerASize,kernelInitializer:tf.initializers.glorotUniform({seed:this.seed}),activation:"linear",useBias:!0,biasInitializer:"zeros"}),this.secondLayer=tf.layers.dense({units:this.secondLayerSize,kernelInitializer:tf.initializers.glorotUniform({seed:this.seed}),activation:"relu",useBias:!0,biasInitializer:"zeros"}),this.outputLayer=tf.layers.dense({units:1,kernelInitializer:tf.initializers.randomUniform({minval:.003,maxval:.003,seed:this.seed}),activation:"linear",useBias:!0,biasInitializer:"zeros"}),this.predict=(e,s)=>tf.tidy(()=>{e&&s&&(t=e,i=s);let o=this.firstLayerA.apply(i),r=this.firstLayerS.apply(t),n=this.add.apply([o,r]),h=this.secondLayer.apply(n);return this.outputLayer.apply(h)});const e=this.predict();this.model=tf.model({inputs:[t,i],outputs:e})}}class d{constructor(t,i,e,s,o){this.actor=t,this.critic=i,this.memory=e,this.noise=s,this.config=o,this.tfGamma=tf.scalar(o.gamma),this.obsInput=tf.input({batchShape:[null,this.config.stateSize]}),this.actionInput=tf.input({batchShape:[null,this.config.nbActions]}),this.actor.buildModel(this.obsInput),this.critic.buildModel(this.obsInput,this.actionInput),this.actorTarget=n(this.actor,c),this.criticTarget=n(this.critic,l),this.perturbedActor=n(this.actor,c),this.setLearningOp()}setLearningOp(){this.criticWithActor=t=>tf.tidy(()=>{const i=this.actor.predict(t);return this.critic.predict(t,i)}),this.criticTargetWithActorTarget=t=>tf.tidy(()=>{const i=this.actorTarget.predict(t);return this.criticTarget.predict(t,i)}),this.actorOptimiser=tf.train.adam(this.config.actorLr),this.criticOptimiser=tf.train.adam(this.config.criticLr),this.criticWeights=[];for(let t=0;t<this.critic.model.trainableWeights.length;t++)this.criticWeights.push(this.critic.model.trainableWeights[t].val);this.actorWeights=[];for(let t=0;t<this.actor.model.trainableWeights.length;t++)this.actorWeights.push(this.actor.model.trainableWeights[t].val);h(this.actor,this.perturbedActor,this.noise.currentStddev,this.config.seed)}distanceMeasure(t){return tf.tidy(()=>{const i=this.perturbedActor.model.predict(t),e=this.actor.model.predict(t);return tf.square(i.sub(e)).mean().sqrt()})}adaptParamNoise(){const t=this.memory.getBatch(this.config.batchSize);if(0==t.obs0.length)return h(this.actor,this.perturbedActor,this.noise.currentStddev,this.config.seed),[0];let i=null;if(t.obs0.length>0){const e=tf.tensor2d(t.obs0),s=this.distanceMeasure(e);h(this.actor,this.perturbedActor,this.noise.currentStddev,this.config.seed),i=s.dataSync(),this.noise.adapt(i[0]),s.dispose(),e.dispose()}}getQvalue(t,i){const e=tf.tensor2d([t]),s=tf.tensor2d([i]),o=this.critic.model.predict([e,s]),r=o.dataSync();return e.dispose(),s.dispose(),o.dispose(),r[0]}predict(t){return this.actor.model.predict(t)}perturbedPrediction(t){return this.perturbedActor.model.predict(t)}targetUpdate(){a(this.criticTarget,this.critic,this.config),a(this.actorTarget,this.actor,this.config)}trainCritic(t,i,e,s,o,r){let n;const h=this.criticOptimiser.minimize(()=>{const t=this.critic.model.predict([e,i]),h=this.criticTargetWithActorTarget(s),a=o.add(tf.scalar(1).sub(r).mul(this.tfGamma).mul(h)),c=tf.sub(a,t).square();return n=c.dataSync(),c.mean()},!0,this.criticWeights);this.memory.appendBackWithCost(t,n);const c=h.dataSync()[0];return h.dispose(),a(this.criticTarget,this.critic,this.config),c}trainActor(t){const i=this.actorOptimiser.minimize(()=>{const i=this.criticWithActor(t);return tf.mean(i).mul(tf.scalar(-1))},!0,this.actorWeights);a(this.actorTarget,this.actor,this.config);const e=i.dataSync()[0];return i.dispose(),e}getTfBatch(){const t=this.memory.popBatch(this.config.batchSize),i=tf.tensor2d(t.actions),e=tf.tensor2d(t.obs0),s=tf.tensor2d(t.obs1),o=tf.tensor1d(t.rewards),r=tf.tensor1d(t.terminals),n=o.expandDims(1),h=r.expandDims(1);return o.dispose(),r.dispose(),{batch:t,tfActions:i,tfObs0:e,tfObs1:s,tfRewards:n,tfTerminals:h}}optimizeCritic(){const{batch:t,tfActions:i,tfObs0:e,tfObs1:s,tfRewards:o,tfTerminals:r}=this.getTfBatch(),n=this.trainCritic(i,e,s,o,r);return i.dispose(),e.dispose(),s.dispose(),o.dispose(),r.dispose(),n}optimizeActor(){const{batch:t,tfActions:i,tfObs0:e,tfObs1:s,tfRewards:o,tfTerminals:r}=this.getTfBatch(),n=this.trainActor(e);return i.dispose(),e.dispose(),s.dispose(),o.dispose(),r.dispose(),n}optimizeCriticActor(){const{batch:t,tfActions:i,tfObs0:e,tfObs1:s,tfRewards:o,tfTerminals:r}=this.getTfBatch(),n=this.trainCritic(t,i,e,s,o,r),h=this.trainActor(e);return i.dispose(),e.dispose(),s.dispose(),o.dispose(),r.dispose(),{lossC:n,lossA:h}}}class u{constructor(t){t=t||{},this.initialStddev=t.initialStddev||.4,this.desiredActionStddev=t.desiredActionStddev||.4,this.adoptionCoefficient=t.adoptionCoefficient||1.01,this.currentStddev=this.initialStddev}adapt(t){t>this.desiredActionStddev?this.currentStddev/=this.adoptionCoefficient:this.currentStddev*=this.adoptionCoefficient}}class p{constructor(t){this.maxlen=t,this.buffer=[],this.priorBuffer=[]}getBatch(t){const i={obs0:[],obs1:[],rewards:[],actions:[],terminals:[]};if(t>this.priorBuffer.length)return console.warn("The size of the replay buffer is < to the batchSize. Return empty batch."),i;for(let e=0;e<t/2;e++){let t=Math.floor(Math.random()*this.priorBuffer.length);i.obs0.push(this.priorBuffer[t].obs0),i.obs1.push(this.priorBuffer[t].obs1),i.rewards.push(this.priorBuffer[t].reward),i.actions.push(this.priorBuffer[t].action),i.terminals.push(this.priorBuffer[t].terminal)}return i}_bufferBatch(t){const i={obs0:[],obs1:[],rewards:[],actions:[],terminals:[]};for(let e=0;e<t/2;e++){let t=this.buffer.pop();i.obs0.push(t.obs0),i.obs1.push(t.obs1),i.rewards.push(t.reward),i.actions.push(t.action),i.terminals.push(t.terminal)}for(let e=0;e<t/2;e++){let t=Math.floor(Math.random()*this.buffer.length);i.obs0.push(this.buffer[t].obs0),i.obs1.push(this.buffer[t].obs1),i.rewards.push(this.buffer[t].reward),i.actions.push(this.buffer[t].action),i.terminals.push(this.buffer[t].terminal),this.buffer.splice(t,1)}return i}_addRandomBufferBatch(t,i){for(let e=0;e<t;e++){let t=Math.floor(Math.random()*this.buffer.length);i.obs0.push(this.buffer[t].obs0),i.obs1.push(this.buffer[t].obs1),i.rewards.push(this.buffer[t].reward),i.actions.push(this.buffer[t].action),i.terminals.push(this.buffer[t].terminal),this.buffer.splice(t,1)}return i}popBatch(t){let i=t;if(t%2!=0&&console.warn("Batch size should be a even."),this.priorBuffer.length<t/2){const i=this._bufferBatch(t);return console.assert(i.obs0.length==t),i}const e={obs0:[],obs1:[],rewards:[],actions:[],terminals:[]};if(t>this.length)return console.warn("The size of the replay buffer is < to the batchSize. Return empty batch."),e;this.buffer.length>0&&(t/=2);for(let i=0;i<t;i++){let t=Math.floor(Math.random()*this.priorBuffer.length);e.obs0.push(this.priorBuffer[t].obs0),e.obs1.push(this.priorBuffer[t].obs1),e.rewards.push(this.priorBuffer[t].reward),e.actions.push(this.priorBuffer[t].action),e.terminals.push(this.priorBuffer[t].terminal),this.priorBuffer.splice(t,1)}return this.buffer.length>0&&this._addRandomBufferBatch(t,e),console.assert(e.obs0.length==i),e}_insert(t,i){return 0==i.length||t.cost<i[0].cost||null==i[0].cost?(i.unshift(t),i):(i.splice(this._locationOf(t,i)+1,0,t),i)}_locationOf(t,i,e,s){e=e||0,s=s||i.length;var o=parseInt(e+(s-e)/2,10);return s-e<=1||i[o]===t?o:null!=i[o].cost&&i[o].cost<t.cost?this._locationOf(t,i,o,s):this._locationOf(t,i,e,o)}appendBackWithCost(t,i){for(let e=0;e<t.obs0.length;e++)this.buffer.length==this.maxlen&&this.buffer.shift(),this._insert({obs0:t.obs0[e],action:t.actions[e],reward:t.rewards[e],obs1:t.obs1[e],terminal:t.terminals[e],cost:i[e]},this.buffer);console.assert(this.buffer.length<=this.maxlen)}append(t,i,e,s,o){this.priorBuffer.length==this.maxlen&&this.priorBuffer.shift(),this.priorBuffer.push({obs0:t,action:i,reward:e,obs1:s,terminal:o,cost:null}),console.assert(this.priorBuffer.length<=this.maxlen)}}class f{constructor(t,i){this.stopTraining=!1,this.env=t,i=i||{},this.config={name:"DDPG",stateSize:i.stateSize||17,nbActions:i.actionSize||2,seed:i.seed||0,batchSize:i.batchSize||128,actorLr:i.actorLr||1e-4,criticLr:i.criticLr||.001,memorySize:i.memorySize||3e4,gamma:i.gamme||.99,noiseDecay:i.noiseDecay||.99,rewardScale:i.rewardScale||1,nbEpochs:i.nbEpochs||200,nbEpochsCycle:i.nbEpochsCycle||5,nbTrainSteps:i.nbTrainSteps||110,tau:i.tau||.008,initialStddev:i.initialStddev||.4,desiredActionStddev:i.desiredActionStddev||.4,adoptionCoefficient:i.adoptionCoefficient||1.01,actorFirstLayerSize:i.actorFirstLayerSize||64,actorSecondLayerSize:i.actorSecondLayerSize||32,criticFirstLayerSSize:i.criticFirstLayerSSize||64,criticFirstLayerASize:i.criticFirstLayerASize||64,criticSecondLayerSize:i.criticSecondLayerSize||32,maxStep:i.maxStep||800,resetEpisode:null==i.resetEpisode||i.resetEpisode,saveDuringTraining:i.saveDuringTraining||!1,saveInterval:i.saveInterval||20,endingCondition:i.endingCondition||void 0,saveModelPath:i.saveModelPath||void 0},this.epoch=0,this.noise=new u(this.config),this.memory=new p(this.config.memorySize),this.actor=new c(this.config),this.critic=new l(this.config),Math.seedrandom(this.config.seed),this.rewardsList=[],this.epiDuration=[],this.ddpg=new d(this.actor,this.critic,this.memory,this.noise,this.config)}save(t){this.ddpg.critic.model.save("indexeddb://critic-"+t),this.ddpg.actor.model.save("indexeddb://actor-"+t),console.log("Models saved!")}async restore(t,i){const e=await tf.loadModel("indexeddb://critic-seek-target-10"),s=await tf.loadModel("indexeddb://actor-seek-target-10");this.ddpg.critic=copyFromSave(e,l,this.config,this.ddpg.obsInput,this.ddpg.actionInput),this.ddpg.actor=copyFromSave(s,c,this.config,this.ddpg.obsInput,this.ddpg.actionInput),this.ddpg.actorTarget=n(this.ddpg.actor,c),this.ddpg.criticTarget=n(this.ddpg.critic,l),this.ddpg.perturbedActor=n(this.ddpg.actor,c),this.ddpg.setLearningOp()}evaluate(){const t=this.env.getState(),i=this.ddpg.predict(tf.tensor2d([t])),e=i.dataSync();this.env.step(e)[1]&&this.env.reset(),i.dispose()}getQvalue(t,i){return this.ddpg.getQvalue(t,i)}stop(){this.stopTraining=!0}_optimize(){this.ddpg.noise.desiredActionStddev=Math.max(.1,this.config.noiseDecay*this.ddpg.noise.desiredActionStddev);let t=[],i=[];console.time("Training");for(let e=0;e<this.config.nbTrainSteps;e++){let{lossC:e,lossA:s}=this.ddpg.optimizeCriticActor();t.push(e),i.push(s)}console.timeEnd("Training"),console.log("desiredActionStddev:",this.ddpg.noise.desiredActionStddev)}_isDone(t){const i={rewards:void 0,steps:void 0,episodes:void 0};i.rewards=this.rewards,i.steps=this.steps,i.episodes=this.episodes;const e=Object.keys(t)[0];if(i.hasOwnProperty(e))return console.log("episodes: "+this.episodes),console.log("rewards: "+this.rewards),console.log("steps: "+this.steps),console.log(" "),("more"==t.condition&&i[e]>=t[e]||"less"==t.condition&&i[e]<=t[e])&&(console.log("Training finished"),this.save(this.saveModelPath),!0);throw"[rl5]: The ending condition doesn't exist!"}stepTrain(t,i){const e=this.ddpg.perturbedPrediction(t);let s=e.dataSync(),o=this.env.step(s),r=o[0];this.rewards+=r;let n=this.env.getState(),h=tf.tensor2d([n]),a=0;return!0===o[1]&&(a=1),this.ddpg.memory.append(i,s,r,n,a),t.dispose(),e.dispose(),{mDone:a,mState:n,tfState:h}}async train(){for(this.stopTraining=!1,this.epoch;this.epoch<this.config.nbEpochs;this.epoch++){for(let t=0;t<this.config.nbEpochsCycle;t++){t%10==0&&g();let i=this.env.getState(),e=tf.tensor2d([i]);for(this.steps=0,this.rewards=0,this.steps=0;this.steps<this.config.maxStep;this.steps++){let t=this.stepTrain(e,i);if(i=t.mState,e=t.tfState,t.mDone)break;if(this.stopTraining)return void console.log("Evaluating the agent.");await tf.nextFrame()}this.ddpg.adaptParamNoise(),this.config.resetEpisode&&this.env.reset(),e.dispose(),this.episodes=this.config.nbEpochsCycle*this.epoch+t,this.stopTraining=this._isDone(this.config.endingCondition),await tf.nextFrame()}this.epoch>1&&this._optimize(),await tf.nextFrame()}}}function g(){let t=tf.memory();console.log("numTensors:"+t.numTensors)}class m{constructor(t,i,e,s){this.position=createVector(t,i),this.w=e,this.h=s}display(){stroke(0),fill(175),strokeWeight(2),rectMode(CORNER),rect(this.position.x,this.position.y,this.w,this.h)}getCenter(){return createVector(this.position.x+this.w/2,this.position.y+this.h/2)}contains(t){return t.x>this.position.x&&t.x<this.position.x+this.w&&t.y>this.position.y&&t.y<this.position.y+this.h}}class y{constructor(t,i,e,s){this.position=createVector(t,i),this.w=e,this.h=s}display(){stroke(0),fill(175),strokeWeight(2),rectMode(CORNER),rect(this.position.x,this.position.y,this.w,this.h)}getCenter(){return createVector(this.position.x+this.w/2,this.position.y+this.h/2)}contains(t){return t.x>this.position.x&&t.x<this.position.x+this.w&&t.y>this.position.y&&t.y<this.position.y+this.h}}class b{constructor(t,i,e,s){this.position=createVector(t,i),this.w=e,this.h=s}display(){stroke(0),fill(175),strokeWeight(2),rectMode(CORNER),rect(this.position.x,this.position.y,this.w,this.h)}getCenter(){return createVector(this.position.x+this.w/2,this.position.y+this.h/2)}contains(t){return t.x>this.position.x&&t.x<this.position.x+this.w&&t.y>this.position.y&&t.y<this.position.y+this.h}}class v{constructor(t,i,e,s){this.position=createVector(t,i),this.w=e,this.h=s}display(){stroke(0),fill(175),strokeWeight(2),rectMode(CORNER),rect(this.position.x,this.position.y,this.w,this.h)}getCenter(){return createVector(this.position.x+this.w/2,this.position.y+this.h/2)}contains(t){return t.x>this.position.x&&t.x<this.position.x+this.w&&t.y>this.position.y&&t.y<this.position.y+this.h}}class S{constructor(t,i,e,s){this.position=createVector(t,i),this.w=e,this.h=s}display(){fill(100,100),rect(this.position.x,this.position.y,this.w,this.h)}getCenter(){return createVector(this.position.x+this.w/2,this.position.y+this.h/2)}contains(t){return t.x>this.position.x&&t.x<this.position.x+this.w&&t.y>this.position.y&&t.y<this.position.y+this.h}}e.d(i,"printInfo",function(){return w}),e.d(i,"createAgent",function(){return z}),e.d(i,"evaluate",function(){return T}),e.d(i,"createEnv",function(){return A}),e.d(i,"loadModel",function(){return M}),e.d(i,"checkModels",function(){return k}),e.d(i,"checkOneModel",function(){return C}),e.d(i,"removeOneModel",function(){return L}),e.d(i,"train",function(){return D}),e.d(i,"saveModel",function(){return O});const x={"CartPole-v0":class{constructor(){this.gravity=9.8,this.massCart=1,this.massPole=.1,this.totalMass=this.massCart+this.massPole,this.cartWidth=.2,this.cartHeight=.1,this.length=.5,this.poleMoment=this.massPole*this.length,this.forceMag=10,this.tau=.02,this.xThreshold=2.4,this.thetaThreshold=12/360*2*Math.PI,this.numFeatures=4,this.numActions=2,this.reset()}reset(){this.x=Math.random()-.5,this.xDot=1*(Math.random()-.5),this.theta=2*(Math.random()-.5)*(6/360*2*Math.PI),this.thetaDot=.5*(Math.random()-.5)}getStateTensor(){return tf.tensor2d([[this.x,this.xDot,this.theta,this.thetaDot]])}step(t){const i=t>0?this.forceMag:-this.forceMag,e=Math.cos(this.theta),s=Math.sin(this.theta),o=(i+this.poleMoment*this.thetaDot*this.thetaDot*s)/this.totalMass,r=(this.gravity*s-e*o)/(this.length*(4/3-this.massPole*e*e/this.totalMass)),n=o-this.poleMoment*r*e/this.totalMass;return this.x+=this.tau*this.xDot,this.xDot+=this.tau*n,this.theta+=this.tau*this.thetaDot,this.thetaDot+=this.tau*r,[this.reward(),this.isDone()]}isDone(){return this.x<-this.xThreshold||this.x>this.xThreshold||this.theta<-this.thetaThreshold||this.theta>this.thetaThreshold}reward(){return this.isDone()?0:1}render(){const t=-this.xThreshold,i=this.xThreshold,e=width/(i-t),s=.8*height,o=this.cartWidth*e,r=this.cartHeight*e,n=this.x*e+width/2;stroke("#000000"),strokeWeight(1),fill(127),rect(n-o/2,s-r/2,o,r);const h=r/4;for(const t of[-1,1])circle(n-o/4*t,s+r/2+h,h);const a=this.theta+PI/2,c=width/2+e*(this.x+cos(a)*this.length),l=s-e*(this.cartHeight/2+sin(a)*this.length);stroke(127),strokeWeight(3),strokeCap(ROUND),line(n,s-r/2-4,c,l);const d=s+r/2+2*h;stroke(200),strokeWeight(1),fill(200),rect(0,d,width,height-d);const u=d-height/2;stroke(200),strokeWeight(4),strokeCap(PROJECT),line(1,d,1,u),line(width-1,d,width-1,u)}},"SeekTargetDiscrete-v0":class{constructor(){this.acceleration=createVector(0,0),this.velocity=createVector(0,0),this.position=createVector(0,0),this.r=6,this.maxspeed=1,this.targetWidth=10,this.targetHeight=height,this.targetY=0,this.target=new m(width-10,this.targetY,this.targetWidth,this.targetHeight),this.numFeatures=2,this.numActions=2,this.success=!1,this.reset()}reset(){this.position.x=20,this.position.y=height/2,this.acceleration.mult(0),this.velocity.mult(0),this.success=!1,this.targetY=0,this.target=new m(width-10,this.targetY,this.targetWidth,this.targetHeight)}step(t){let i;return 0==t?i=-.001:1==t&&(i=.001),this.acceleration.add(.01,i),this.velocity.add(this.acceleration),this.velocity.limit(this.maxspeed),this.position.add(this.velocity),this.acceleration.x=0,[this.reward(),this.isDone(),this.success]}isDone(){return!!(this.position.x<0||this.position.x>width||this.position.y<0||this.position.y>height||this.target.contains(this.position))}reward(){let t=1;return(this.position.x<0||this.position.y<0||this.position.y>height)&&(t=0),t}getStateTensor(){return tf.tensor2d([[this.position.x/width,this.position.y/height]])}randomWalk(){let t;t=random()<.5?0:1,this.step(t),this.isDone()&&this.reset()}render(){let t=this.velocity.heading()+PI/2;fill(127),stroke(200),strokeWeight(1),push(),translate(this.position.x,this.position.y),rotate(t),beginShape(),vertex(0,2*-this.r),vertex(-this.r,2*this.r),vertex(this.r,2*this.r),endShape(CLOSE),pop(),this.target.display()}},"AvoidObstacles-v0":class{constructor(t){this.vertialStates=20,this.horizontalStates=20,this.squareSize=20,this.numTargets=10,this.numActions=4,this.numFeatures=2*(this.numTargets+1),this.p5=t,this.targets=[],this.reset()}reset(){this.blackX=this.p5.int(this.p5.random(0,this.horizontalStates)),this.blackY=this.p5.int(this.p5.random(0,this.vertialStates));for(let t=0;t<this.numTargets;t++){const t=this.p5.int(this.p5.random(0,this.horizontalStates)),i=this.p5.int(this.p5.random(0,this.vertialStates));this.targets.push([t,i])}}render(){this.p5.fill(255,0,0,100);for(let t=0;t<this.numTargets;t++)this.p5.rect(this.targets[t][0]*this.squareSize,this.targets[t][1]*this.squareSize,this.squareSize,this.squareSize);this.p5.fill(0,0,0,100),this.p5.rect(this.blackX*this.squareSize,this.blackY*this.squareSize,this.squareSize,this.squareSize)}step(t){return 0==t&&this.blackX>0?this.blackX-=1:1==t&&this.blackX<this.horizontalStates-1?this.blackX+=1:2==t&&this.blackY>0?this.blackY-=1:3==t&&this.blackY<this.vertialStates-1&&(this.blackY+=1),[this.reward(),this.isDone()]}isDone(){for(let t=0;t<this.numTargets;t++)if(this.blackX==this.targets[t][0]&&this.blackY==this.targets[t][1])return console.log("Failed"),!0}reward(){return 1}getStateTensor(){const t=[this.blackX/this.horizontalStates,this.blackY/this.vertialStates];for(let i=0;i<this.numTargets;i++)t.push(this.targets[i][0]/this.horizontalStates),t.push(this.targets[i][1]/this.vertialStates);return tf.tensor2d([t])}},"GridWorld1D-v0":class{constructor(){this.numFeatures=10,this.numActions=2,this.squareSize=40,this.currentState=0,this.reset()}reset(){this.currentState=0}step(t){return 1==t?this.currentState+=1:0==t&&(0==this.currentState?this.currentState=0:this.currentState-=1),[this.reward(),this.isDone()]}isDone(){return this.currentState==this.numFeatures-1}reward(){return this.isDone()?1:0}getState(){return this.currentState}randomWalk(){const t=floor(random(this.numActions));this.step(t),console.log("reward: "+this.reward()),this.isDone()&&this.reset()}render(){fill(255,0,0),rect(width-this.squareSize,(height-this.squareSize)/2,this.squareSize,this.squareSize),fill(122,122),rect(this.squareSize*this.currentState,(height-this.squareSize)/2,this.squareSize,this.squareSize)}},"AvoidObstaclesContinous-v0":class{constructor(){this.acceleration=createVector(0,0),this.velocity=createVector(0,0),this.position=createVector(0,0),this.r=6,this.maxspeed=1,this.maxforce=.2,this.obstacleWidth=10,this.obstacleHeight=height/3,this.obstacle=new y(width/2,height/3,this.obstacleWidth,this.obstacleHeight),this.reset()}reset(){this.position.x=20,this.position.y=height/2,this.acceleration.mult(0),this.velocity.mult(0)}step(t){let i=createVector(.01,.05*t[0]);return this.acceleration.add(i),this.velocity.add(this.acceleration),this.velocity.limit(this.maxspeed),this.position.add(this.velocity),this.acceleration.mult(0),[this.reward(),this.isDone()]}isDone(){return!!(this.position.x<0||this.position.x>width||this.position.y<0||this.position.y>height||this.obstacle.contains(this.position))}reward(){let t=this.position.x/width;return this.obstacle.contains(this.position)&&(t+=100),t}getState(){return[this.position.x/width,this.position.y/height]}randomWalk(){let t=createVector();t.x=.01,t.y=random(-this.maxforce,this.maxforce),this.step(t)}render(){let t=this.velocity.heading()+PI/2;fill(127),stroke(200),strokeWeight(1),push(),translate(this.position.x,this.position.y),rotate(t),beginShape(),vertex(0,2*-this.r),vertex(-this.r,2*this.r),vertex(this.r,2*this.r),endShape(CLOSE),pop(),this.obstacle.display()}},"SeekTargetContinuous-v0":class{constructor(){this.acceleration=createVector(0,0),this.velocity=createVector(0,0),this.position=createVector(0,0),this.r=6,this.maxspeed=1,this.maxforce=.2,this.targetWidth=10,this.targetHeight=height/4,this.target=new b(width-10,3*height/8,this.targetWidth,this.targetHeight),this.reset()}reset(){this.position.x=20,this.position.y=height/2,this.acceleration.mult(0),this.velocity.mult(0)}step(t){let i=createVector(.01*t[1],.01*t[0]);return this.acceleration.add(i),this.velocity.add(this.acceleration),this.velocity.limit(this.maxspeed),this.position.add(this.velocity),this.acceleration.mult(0),[this.reward(),this.isDone()]}isDone(){return!!(this.position.x<0||this.position.x>width||this.position.y<0||this.position.y>height||this.target.contains(this.position))}reward(){let t=dist(0,0,1,1)-dist(this.position.x/width,this.position.y/height,1,.5);return this.target.contains(this.position)&&(t+=1e3),t}getState(){return[this.position.x/width,this.position.y/height]}randomWalk(){let t=createVector();t.x=.01,t.y=random(-this.maxforce,this.maxforce),this.step(t)}render(){let t=this.velocity.heading()+PI/2;fill(127),stroke(200),strokeWeight(1),push(),translate(this.position.x,this.position.y),rotate(t),beginShape(),vertex(0,2*-this.r),vertex(-this.r,2*this.r),vertex(this.r,2*this.r),endShape(CLOSE),pop(),this.target.display()}},"Pendulum-v0":class{construct(){this.maxSpeed=8,this.maxTorque=2,this.dt=.05,this.g=10,this.numFeatures=3,this.numActions=1,this.actionSpace=[-this.maxTorque,this.maxTorque],this.reset()}reset(){this.theta=random(-PI,PI),this.thetaCos=cos(this.theta),this.thetaSin=sin(this.theta),this.thetaDot=random(-1,1)}step(t){this.action=constrain(t,this.actionSpace[0],this.actionSpace[1]),this.last_action=this.action;let i=this.thetaDot+(-3*this.g/2*sin(this.theta+PI)+3*this.action)*this.dt;i=constrain(i,-this.maxSpeed,this.maxSpeed);const e=this.theta+i*this.dt;return this.theta=e,this.thetaCos=cos(this.theta),this.thetaSin=sin(this.theta),this.thetaDot=i,[this.reward(),this.isDone()]}reward(){return-1*(Math.pow(this.theta,2)+.1*Math.pow(this.thetaDot,2)+.001*Math.pow(this.action,2))}isDone(){return!1}render(){stroke(127),strokeWeight(6),strokeCap(ROUND),line(width/2,height/2,width/2,height/2+200),fill(255,0,0),noStroke(),circle(width/2,height/2,4,4)}},"SeekAvoidContinous-v0":class{constructor(){this.acceleration=createVector(0,0),this.velocity=createVector(0,0),this.position=createVector(0,0),this.r=6,this.maxspeed=1,this.maxforce=.2,this.obstacleWidth=10,this.obstacleHeight=height/2,this.obstacle_1=new v(width/3,height/8,this.obstacleWidth,this.obstacleHeight),this.obstacle_2=new v(2*width/3,3*height/8,this.obstacleWidth,this.obstacleHeight),this.reset()}reset(){this.position.x=20,this.position.y=height/2,this.acceleration.mult(0),this.velocity.mult(0)}step(t){let i=createVector(.01,t[0]);return this.acceleration.add(i),this.velocity.add(this.acceleration),this.velocity.limit(this.maxspeed),this.position.add(this.velocity),this.acceleration.mult(0),[this.reward(),this.isDone()]}isDone(){return!!(this.position.x<0||this.position.x>width||this.position.y<0||this.position.y>height||this.obstacle.contains(this.position))}reward(){return this.position.x<0||this.position.x>width||this.position.y<0||this.position.y>height||this.obstacle_1.contains(this.position)||this.obstacle_2.contains(this.position)?-1:0}getState(){return[this.position.x/width,this.position.y/height]}randomWalk(){let t=createVector();t.x=.01,t.y=random(-this.maxforce,this.maxforce),this.step(t)}render(){fill(127),rect(this.position.x,this.position.y,20,20),this.obstacle_1.display(),this.obstacle_2.display(),fill(255,0,0),rect(7*width/8,height/2,20,20)}},"Stay-v0":class{constructor(){this.width=500,this.height=500,this.acceleration=createVector(0,0),this.velocity=createVector(0,0),this.position=createVector(this.width/2,this.height/2),this.r=6,this.maxspeed=2,this.maxLength=2e3,this.index=0,this.path=[],this.numFeatures=4,this.numActions=4,this.success=!0,this.steps=0,this.dangerZone=new S(random(this.width/2),random(this.height/2),this.width/2,this.height/2),this.reset()}reset(){this.success=!0,this.acceleration.mult(0),this.velocity.mult(0),this.steps=0}step(t){let i=0,e=0;return 0==t?i=-.001:1==t?i=.001:2==t?e=-.001:3==t&&(e=.001),this.acceleration.add(i,e),this.velocity.add(this.acceleration),this.velocity.limit(this.maxspeed),this.position.add(this.velocity),this.position.x<0?(this.position.x=0,this.velocity.mult(-1),this.acceleration.mult(0)):this.position.x>=this.width&&(this.position.x=this.width,this.velocity.mult(-1),this.acceleration.mult(0)),this.position.y<=0?(this.position.y=0,this.velocity.mult(-1),this.acceleration.mult(0)):this.position.y>this.height&&(this.position.y=this.height,this.velocity.mult(-1),this.acceleration.mult(0)),this.index+=1,this.index<this.maxLength?this.path.push([this.position.x,this.position.y]):this.path[this.index%this.maxLength]=[this.position.x,this.position.y],this.steps+=1,[this.reward(),this.isDone(),this.success]}isDone(){return!1}reward(){return this.dangerZone.contains(this.position)?(this.success=!1,-1):0}getStateTensor(){return tf.tensor2d([[floor(this.position.x)/this.width,floor(this.position.y)/this.height,this.velocity.x,this.velocity.y]])}randomWalk(){let t;t=random()<.5?0:1,this.step(t),this.isDone()&&this.reset()}render(){fill(200),noStroke();for(let t=0;t<this.path.length;t++)circle(this.path[t][0],this.path[t][1],1);noStroke(),fill(255,0,0),circle(this.position.x,this.position.y,6),this.dangerZone.display(),stroke(255),noFill(),rect(0,0,this.width,this.height)}}};function w(){console.log("This is a reinforcement learning library for p5.js.")}function z(t,i,e){return"REINFORCE"==t?new s(i,e):"TabularQ"==t?new r(i,e):"DDPG"==t?new f(i,e):void console.log("The policy doesn't exist in this library. Please choose another one.")}function T(t){if("REINFORCE"==t.name)tf.tidy(()=>{const i=t.getActions(env.getStateTensor())[0];env.step(i)[1]&&env.reset()});else if("TabularQ"==t.config.name){frameRate(1);const i=t.chooseAction(env.getState(),t.qTable,!1);env.step(i)[1]&&env.reset()}else"DDPG"==t.config.name&&t.evaluate()}function A(t){Object.keys(x).length;if(x.hasOwnProperty(t))return new x[t];console.log("This env doesn't exist!")}async function M(t,i){if("REINFORCE"==t.name){if(!((i="indexeddb://"+i)in await tf.io.listModels()))throw new Error(`Cannot find model at ${modelPath}.`);{const e=await tf.loadLayersModel(i);console.log(`Loaded model from ${i}`),t.model=e}}else"TabularQ"==t.name&&(t.qTable=await loadTable(i+".csv"),console.log(`Loaded model from ${i}`))}async function k(){console.log(JSON.stringify(await tf.io.listModels())+"\n\n")}async function C(t){const i=await tf.io.listModels();null==i[t]?console.log("The path is invalid.\n\n"):console.log(i[t])}async function L(t){null==(await tf.io.listModels())[t]?console.log("The model doesn't exist.\n\n"):(await tf.io.removeModel(t),console.log("Model "+t+"has been removed.\n\n"))}async function D(t){if(console.log(t.config.name+" training starts"),"DDPG"==t.config.name)t.train();else if("TabularQ"==t.config.name||"REINFORCE"==t.config.name){let i=0;for(let e=0;e<t.config.trainIterations&&!t.stopTraining;++e){const s=await t.train();s[2]?i+=1:i=0,s[2]=i,null!=s&&(t.stopTraining=W(s,t,e))}}}async function O(t,i){await t.save(i)}function W(t,i,e){const s={rewards:void 0,steps:void 0,episodes:void 0,consecutiveSuccess:void 0},o=i.config.endingCondition;s.rewards=t[0],s.steps=t[1],s.consecutiveSuccess=t[2],s.episodes=e;const r=Object.keys(o)[0];if(s.hasOwnProperty(r)){if(console.log("Episodes: "+e),console.log("Total rewards: "+t[0]),console.log("Total steps: "+t[1]),console.log("Consecutive success "+t[2]),console.log(" "),"more"==o.condition&&s[r]>=o[r]||"less"==o.condition&&s[r]<=o[r]){if(console.log("Training finished"),console.log("Start evaluation"),i.config.saveModel)if("REINFORCE"==i.config.name)rl5.saveModel(i.model,i.config.saveModelPath),console.log("Model saved");else{if("TabularQ"==i.config.name)return saveTable(i.qTable,i.config.modelName+".csv"),console.log("Model saved as "+i.config.modelName),!0;console.log("This algorithm doesn't support saving model!")}return!0}return!1}throw"[rl5]: The ending condition doesn't exist!"}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,